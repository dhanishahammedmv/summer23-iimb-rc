"""I am not allowed to share the dataset used here, as my instructor advised me not to. Sorry about that."""

import gurobipy as gp
from gurobipy import GRB

try:
    filename = input("Enter the name of file to open: ")
    with open(filename, 'r') as file:
        no_of_vertices = []
        for line in file:
            if line.startswith('p'):
                words = line.split()
                no_of_vertices.append(words[2])
    vertices = list(range(1, int(no_of_vertices[0]) + 1))
    colors = list(range(1, int(no_of_vertices[0]) + 1))

    with open(filename, 'r') as file:
        edges = []
        for lines in file:
            if lines.startswith('e'):
                num = lines.split()[1:]
                edge = tuple(map(int, num))
                edges.append(edge)

    print("vertices =", vertices)
    print("colors =", colors)
    print("edges =", edges)

    # Model
    vc = gp.Model("VCP")

    # Variables
    x = []
    for v in vertices:
        x.append([vc.addVar(vtype=GRB.BINARY, name="X" + str(v) + " " + str(c)) for c in colors])
    y = []
    for c in colors:
        y.append(vc.addVar(vtype=GRB.BINARY, name="Y" + str(c)))

    # Constraints
    # C1
    for v in range(len(vertices)):
        vc.addConstr(gp.quicksum(x[v][c] for c in range(len(colors))) == 1)

    # C2
    for v1 in range(len(vertices)):
        for v2 in range(len(vertices)):
            if (v1, v2) in edges:
                for c in range(len(colors)):
                    vc.addConstr(x[v1][c] + x[v2][c] <= y[c])

    # Objective
    vc.setObjective(gp.quicksum(y[c] for c in range(len(colors))), GRB.MINIMIZE)

    #optimize
    vc.optimize()


    #check status
    if vc.status == GRB.OPTIMAL:
        print("The problem has optimal solution")
        vc.optimize()

        output_file = input("enter the name of output file for solution: ")
        with open(output_file, "w") as output:
            print("THE SOLUTION:")
            output.write("THE SOLUTION:\n")

            colors_used = []
            for c in range(len(colors)):
                if y[c].X == 1:
                    colors_used.append(colors[c])
            print("Colors used =", colors_used)
            print("Total number of colors used =", len(colors_used))
            output.write("Colors used = {}\n".format(colors_used))
            output.write("Total number of colors used = {}\n".format(len(colors_used)))

            vertex_color = {}
            for v in range(len(vertices)):
                for c in range(len(colors)):
                    if x[v][c].X == 1:
                        if colors[c] not in vertex_color:
                            vertex_color[colors[c]] = []
                        vertex_color[colors[c]].append(vertices[v])
            for c, v in vertex_color.items():
                print("Color", c, "-", "Vertices:", v)
                output.write("Color {} - Vertices: {}\n".format(c, v))

            print('Objective value (total number of colors used to color the graph) = %g' % vc.ObjVal)
            output.write("Objective value (total number of colors used to color the graph) = %g\n" % vc.ObjVal)
            output.close()

    else:
        print("No optimal solution for the problem")


    for v in vc.getVars():
        print('%s %g' % (v.VarName, v.X))
    print('Obj: %g' % vc.ObjVal)

except gp.GurobiError as e:
    print('Error code ' + str(e.errno) + ': ' + str(e))
except AttributeError:
    print('Encountered an attribute error.')
